# Docker Compose 简化版
# 使用SQLite + 可选Redis，无需PostgreSQL
# 适合快速体验和小规模使用（1-20人）

services:
  # Redis（轻量级，用于Celery）
  redis:
    image: redis:7-alpine
    container_name: chaoxing_redis_lite
    command: redis-server --requirepass ${REDIS_PASSWORD:-simple_redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "simple_redis_pass", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  # 后端服务（SQLite + Redis模式）
  backend:
    image: ghcr.io/vivi141/chaoxing:latest
    # 或从源码构建：
    # build:
    #   context: ..
    #   dockerfile: web/backend/Dockerfile
    container_name: chaoxing_backend
    working_dir: /app/web/backend
    command: uvicorn app:app --host 0.0.0.0 --port 8000
    environment:
      # 使用SQLite数据库（简单模式，注意必须使用aiosqlite异步驱动）
      DATABASE_URL: "sqlite+aiosqlite:////app/data/chaoxing.db"
      
      # Redis连接（用于Celery和缓存）
      REDIS_URL: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      
      # 应用密钥（默认值，生产环境强烈建议修改！）
      # 生成新密钥：python -c "import secrets; print(secrets.token_urlsafe(32))"
      SECRET_KEY: "${SECRET_KEY:-insecure-default-secret-key-please-change-in-production-minimum-32-chars}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-insecure-default-jwt-secret-key-change-me-minimum-32-chars}"
      
      # 调试模式（可选）
      DEBUG: "${DEBUG:-False}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    
    volumes:
      - ./backend/data:/app/data        # SQLite数据库文件
      - ./backend/logs:/app/logs        # 日志文件
    
    ports:
      - "8000:8000"
    
    restart: unless-stopped
    
    depends_on:
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Celery Worker（异步任务，可选）
  celery:
    image: ghcr.io/vivi141/chaoxing:latest
    container_name: chaoxing_celery_lite
    working_dir: /app/web/backend
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      DATABASE_URL: "sqlite+aiosqlite:////app/data/chaoxing.db"
      REDIS_URL: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      CELERY_BROKER_URL: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      CELERY_RESULT_BACKEND: "redis://:${REDIS_PASSWORD:-simple_redis_pass}@redis:6379/0"
      SECRET_KEY: "${SECRET_KEY:-insecure-default-secret-key-please-change-in-production-minimum-32-chars}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-insecure-default-jwt-secret-key-change-me-minimum-32-chars}"
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

# 使用说明：
# 
# 零配置快速启动：
#   docker compose -f docker-compose.simple.yml up -d
#   （使用默认密钥，仅用于测试）
#
# 生产环境启动（推荐）：
#   1. 创建.env文件配置密钥
#   2. docker compose -f docker-compose.simple.yml up -d
#
# 注意：
# 1. 此配置使用SQLite + Redis，适合快速启动和小规模使用
# 2. SQLite适合1-20人使用，超过建议升级到PostgreSQL
# 3. Redis只用于Celery任务队列，轻量级（~20MB内存）
# 4. 默认密钥仅用于测试，生产环境必须修改！
# 5. 可以先用此配置启动，后续手动升级到PostgreSQL（见docker-compose.yml）
# 6. 未来版本会支持Web界面配置数据库（开发中）
