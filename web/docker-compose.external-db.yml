# Docker Compose 外部数据库版
# 使用已有的PostgreSQL和Redis，不再部署新的数据库
# 适合：已有数据库服务，只需要部署应用

services:
  # 后端服务（连接外部PostgreSQL和Redis）
  backend:
    image: ghcr.io/vivi141/chaoxing:latest
    # 或从源码构建：
    # build:
    #   context: ..
    #   dockerfile: web/backend/Dockerfile
    container_name: chaoxing_backend
    working_dir: /app/web/backend
    command: bash -c "alembic upgrade head 2>/dev/null || true; uvicorn app:app --host 0.0.0.0 --port 8000"
    environment:
      # === 外部PostgreSQL配置（必需修改） ===
      # 格式：postgresql+asyncpg://用户名:密码@数据库容器名或IP:端口/数据库名
      DATABASE_URL: "${DATABASE_URL:-postgresql+asyncpg://chaoxing_user:your_password@1Panel-postgresql-LEsZ:5432/chaoxing_db}"
      
      # === 外部Redis配置（必需修改） ===
      # 格式：redis://:密码@Redis容器名或IP:端口/数据库编号
      REDIS_URL: "${REDIS_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      
      # === 应用密钥（必需修改！） ===
      # 生成命令：python -c "import secrets; print(secrets.token_urlsafe(32))"
      SECRET_KEY: "${SECRET_KEY:-请修改为随机密钥}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-请修改为随机密钥}"
      
      # === 可选配置 ===
      DEBUG: "${DEBUG:-False}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    
    volumes:
      - ./backend/data:/app/data        # 数据文件（配置、缓存等）
      - ./backend/logs:/app/logs        # 日志文件
    
    ports:
      - "8000:8000"
    
    # 网络模式：使用1Panel的网络，才能访问其他容器
    # 方式1：使用1Panel的默认网络（推荐）
    network_mode: "1panel-network"
    
    # 方式2：如果方式1不工作，使用host网络（备选）
    # network_mode: "host"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Celery Worker（异步任务）
  celery:
    image: ghcr.io/vivi141/chaoxing:latest
    container_name: chaoxing_celery
    working_dir: /app/web/backend
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      # === 与backend相同的数据库配置 ===
      DATABASE_URL: "${DATABASE_URL:-postgresql+asyncpg://chaoxing_user:your_password@1Panel-postgresql-LEsZ:5432/chaoxing_db}"
      REDIS_URL: "${REDIS_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      SECRET_KEY: "${SECRET_KEY:-请修改为随机密钥}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-请修改为随机密钥}"
    
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    
    # 使用相同的网络模式
    network_mode: "1panel-network"
    
    restart: unless-stopped

