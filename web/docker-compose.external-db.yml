# Docker Compose 外部数据库版
# 使用已有的PostgreSQL和Redis，不再部署新的数据库
# 适合：已有数据库服务，只需要部署应用

services:
  # 后端服务（连接外部PostgreSQL和Redis）
  backend:
    image: ghcr.io/vivi141/chaoxing:latest
    # 或从源码构建：
    # build:
    #   context: ..
    #   dockerfile: web/backend/Dockerfile
    container_name: chaoxing_backend
    working_dir: /app/web/backend
    command: >
      bash -c "
      alembic upgrade head 2>/dev/null || echo 'DB already initialized';
      cd /app && uvicorn app:app --host 0.0.0.0 --port 8000
      "
    environment:
      # === 外部PostgreSQL配置（必需修改） ===
      # 格式：postgresql+asyncpg://用户名:密码@数据库容器名或IP:端口/数据库名
      DATABASE_URL: "${DATABASE_URL:-postgresql+asyncpg://chaoxing_user:your_password@1Panel-postgresql-LEsZ:5432/chaoxing_db}"
      
      # === 外部Redis配置（必需修改） ===
      # 格式：redis://:密码@Redis容器名或IP:端口/数据库编号
      REDIS_URL: "${REDIS_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      
      # === 应用密钥（必需修改！） ===
      # 生成命令：python -c "import secrets; print(secrets.token_urlsafe(32))"
      SECRET_KEY: "${SECRET_KEY:-请修改为随机密钥}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-请修改为随机密钥}"
      
      # === 可选配置 ===
      DEBUG: "${DEBUG:-False}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    
    volumes:
      - ./backend/data:/app/data        # 数据文件（配置、缓存等）
      - ./backend/logs:/app/logs        # 日志文件
    
    ports:
      - "8000:8000"
    
    # 网络模式：使用1Panel的网络，才能访问其他容器
    # 方式1：使用1Panel的默认网络（推荐）
    network_mode: "1panel-network"
    
    # 方式2：如果方式1不工作，使用host网络（备选）
    # network_mode: "host"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  # Celery Worker（异步任务）
  celery:
    image: ghcr.io/vivi141/chaoxing:latest
    container_name: chaoxing_celery
    working_dir: /app/web/backend
    command: celery -A celery_app worker --loglevel=info --concurrency=2
    environment:
      # === 与backend相同的数据库配置 ===
      DATABASE_URL: "${DATABASE_URL:-postgresql+asyncpg://chaoxing_user:your_password@1Panel-postgresql-LEsZ:5432/chaoxing_db}"
      REDIS_URL: "${REDIS_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND:-redis://:your_redis_password@1Panel-redis-71AP:6379/0}"
      SECRET_KEY: "${SECRET_KEY:-请修改为随机密钥}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-请修改为随机密钥}"
    
    volumes:
      - ./backend/data:/app/data
      - ./backend/logs:/app/logs
    
    # 使用相同的网络模式
    network_mode: "1panel-network"
    
    restart: unless-stopped

# 使用说明：
#
# === 步骤1：创建.env文件配置数据库 ===
#
# 在 web/ 目录下创建 .env 文件：
#
# DATABASE_URL=postgresql+asyncpg://chaoxing_user:cAwXC8CNcQT4d3nt@1Panel-postgresql-LEsZ:5432/chaoxing_db
# REDIS_URL=redis://:redis_GAWJ8Z@1Panel-redis-71AP:6379/0
# CELERY_BROKER_URL=redis://:redis_GAWJ8Z@1Panel-redis-71AP:6379/0
# CELERY_RESULT_BACKEND=redis://:redis_GAWJ8Z@1Panel-redis-71AP:6379/0
# SECRET_KEY=inUZZsv9UeOIWytooE03cPdWGndUkFQ1NSqSV9A8EsY
# JWT_SECRET_KEY=Ffdj9ptoV9UukOHTQN9Ey1LPnH-hJcFxDVqOk9q4toQ
#
# === 步骤2：启动 ===
#
# docker compose -f docker-compose.external-db.yml up -d
#
# === 注意事项 ===
#
# 1. 数据库容器名解析：
#    - 如果在同一个Docker网络：使用容器名（如 1Panel-postgresql-LEsZ）
#    - 如果不在同一网络：使用IP地址（如 172.17.0.5）
#
# 2. 查看容器网络：
#    docker inspect 1Panel-postgresql-LEsZ | grep NetworkMode
#    docker network ls
#
# 3. 测试连接（可选）：
#    docker exec -it chaoxing_backend bash
#    apt update && apt install postgresql-client redis-tools -y
#    psql postgresql://chaoxing_user:密码@1Panel-postgresql-LEsZ:5432/chaoxing_db -c "SELECT 1"
#    redis-cli -h 1Panel-redis-71AP -p 6379 -a 密码 ping
#
# 4. 如果容器名无法解析，改用IP：
#    DATABASE_URL=postgresql+asyncpg://chaoxing_user:密码@172.17.0.5:5432/chaoxing_db
#    REDIS_URL=redis://:密码@172.17.0.6:6379/0
#
# 5. 优势：
#    ✅ 不重复部署数据库，节省资源
#    ✅ 复用已有的数据库配置和备份
#    ✅ 统一管理所有数据库

