services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: chaoxing_postgres
    environment:
      POSTGRES_USER: chaoxing_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_DB: chaoxing_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U chaoxing_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - chaoxing_network

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: chaoxing_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - chaoxing_network

  # 后端API服务
  backend:
    build:
      context: ..
      dockerfile: web/backend/Dockerfile
    container_name: chaoxing_backend
    command: >
      sh -c "alembic upgrade head &&
             gunicorn app:app -w 4 -k uvicorn.workers.UvicornWorker
             --bind 0.0.0.0:8000
             --access-logfile -
             --error-logfile -"
    environment:
      DATABASE_URL: postgresql+asyncpg://chaoxing_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/chaoxing_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-please-change}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev-jwt-secret-key}
      DEBUG: ${DEBUG:-False}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chaoxing_network

  # Celery Worker（异步任务处理）
  celery:
    build:
      context: ..
      dockerfile: web/backend/Dockerfile
    container_name: chaoxing_celery
    command: celery -A celery_app worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    environment:
      DATABASE_URL: postgresql+asyncpg://chaoxing_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/chaoxing_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-please-change}
    volumes:
      - ./backend:/app
      - celery_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - chaoxing_network

  # Celery Beat（定时任务调度，可选）
  celery-beat:
    build:
      context: ..
      dockerfile: web/backend/Dockerfile
    container_name: chaoxing_celery_beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      DATABASE_URL: postgresql+asyncpg://chaoxing_user:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/chaoxing_db
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-changeme123}@redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - chaoxing_network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: chaoxing_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - chaoxing_network

  # Nginx反向代理（可选，生产环境推荐）
  nginx:
    image: nginx:alpine
    container_name: chaoxing_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - chaoxing_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  celery_logs:
    driver: local

networks:
  chaoxing_network:
    driver: bridge

