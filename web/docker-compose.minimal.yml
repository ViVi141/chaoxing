# Docker Compose 极简版
# 只有后端，无Redis/Celery/PostgreSQL
# 适合：只需要Web管理界面，手动操作

services:
  # 后端服务（仅SQLite）
  backend:
    image: ghcr.io/vivi141/chaoxing:latest
    # 或从源码构建：
    # build:
    #   context: ..
    #   dockerfile: web/backend/Dockerfile
    container_name: chaoxing_minimal
    working_dir: /app/web/backend
    command: >
      bash -c "
      alembic upgrade head 2>/dev/null || echo 'DB already initialized';
      cd /app && uvicorn app:app --host 0.0.0.0 --port 8000
      "
    environment:
      # 使用SQLite数据库（最简单）
      DATABASE_URL: "sqlite+aiosqlite:////app/data/chaoxing.db"
      
      # 应用密钥（默认值，生产环境强烈建议修改！）
      # 生成新密钥：python -c "import secrets; print(secrets.token_urlsafe(32))"
      SECRET_KEY: "${SECRET_KEY:-insecure-default-secret-key-please-change-in-production-minimum-32-chars}"
      JWT_SECRET_KEY: "${JWT_SECRET_KEY:-insecure-default-jwt-secret-key-change-me-minimum-32-chars}"
      
      # 调试模式（可选）
      DEBUG: "${DEBUG:-False}"
      LOG_LEVEL: "${LOG_LEVEL:-INFO}"
    
    volumes:
      - ./backend/data:/app/data        # SQLite数据库文件
      - ./backend/logs:/app/logs        # 日志文件
    
    ports:
      - "8000:8000"
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# 使用说明：
# 
# 快速启动：
#   docker compose -f docker-compose.minimal.yml up -d
#
# 功能说明：
#   ✅ Web管理界面
#   ✅ 登录/注册
#   ✅ 课程管理
#   ✅ 手动刷课（在Web界面点击）
#   ❌ 自动刷课（无Celery）
#   ❌ 定时任务（无Celery）
#
# 资源占用：
#   内存：~200MB
#   磁盘：~500MB
#
# 停止服务：
#   docker compose -f docker-compose.minimal.yml down
#
# 如需完整功能（自动刷课）：
#   使用 docker-compose.simple.yml 或 docker-compose.yml

